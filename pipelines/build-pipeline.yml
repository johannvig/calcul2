trigger:
  - main

pool: 'default'

variables:
  AzureWebJobsStorage: ''
  ServiceBusConnectionString: ''

steps:
  # Étape 1 : Déployer le Blob Storage
  - task: AzureResourceManagerTemplateDeployment@3
    displayName: 'Déployer le Blob Storage'
    inputs:
      azureResourceManagerConnection: 'Azure subscription 1(2)(4752c137-48fe-4a21-ac6e-435c1d51dbe9)'
      resourceGroupName: 'Projet-2'
      location: 'canadacentral'
      templateLocation: 'Linked artifact'
      csmFile: 'infra/azuredeploy-storage.json'
      csmParametersFile: 'infra/parameters-storage.json'

  # Étape 2 : Récupérer la chaîne de connexion Blob Storage
  - task: AzureCLI@2
    displayName: 'Récupérer la chaîne de connexion AzureWebJobsStorage'
    inputs:
      azureSubscription: 'Azure subscription 1(2)(4752c137-48fe-4a21-ac6e-435c1d51dbe9)'
      scriptType: 'ps'
      scriptLocation: 'inlineScript'
      inlineScript: |
        $STORAGE_CONNECTION_STRING = az storage account show-connection-string `
          --resource-group 'Projet-2' `
          --name 'storageprojet23' `
          --query 'connectionString' -o tsv

        Write-Host "Chaîne de connexion Blob Storage : $STORAGE_CONNECTION_STRING"
        Write-Host "##vso[task.setvariable variable=AzureWebJobsStorage]$STORAGE_CONNECTION_STRING"

  # Étape 3 : Déployer le Service Bus
  - task: AzureResourceManagerTemplateDeployment@3
    displayName: 'Déployer le Service Bus'
    inputs:
      azureResourceManagerConnection: 'Azure subscription 1(2)(4752c137-48fe-4a21-ac6e-435c1d51dbe9)'
      resourceGroupName: 'Projet-2'
      location: 'canadacentral'
      templateLocation: 'Linked artifact'
      csmFile: 'infra/azuredeploy-servicebus.json'
      csmParametersFile: 'infra/parameters-servicebus.json'

  # Étape 4 : Récupérer la chaîne de connexion ServiceBusConnectionString
  - task: AzureCLI@2
    displayName: 'Récupérer la chaîne de connexion ServiceBusConnectionString'
    inputs:
      azureSubscription: 'Azure subscription 1(2)(4752c137-48fe-4a21-ac6e-435c1d51dbe9)'
      scriptType: 'ps'
      scriptLocation: 'inlineScript'
      inlineScript: |
        $SERVICEBUS_CONNECTION_STRING = az servicebus namespace authorization-rule keys list `
          --resource-group 'Projet-2' `
          --namespace-name 'AzureBus-TMEB' `
          --name 'RootManageSharedAccessKey' `
          --query 'primaryConnectionString' -o tsv

        Write-Host "Chaîne de connexion Service Bus : $SERVICEBUS_CONNECTION_STRING"
        Write-Host "##vso[task.setvariable variable=ServiceBusConnectionString]$SERVICEBUS_CONNECTION_STRING"

  # Étape 5 : Vérification ou création de la Function App
  - task: AzureCLI@2
    displayName: 'Vérifier ou créer la Function App'
    inputs:
      azureSubscription: 'Azure subscription 1(2)(4752c137-48fe-4a21-ac6e-435c1d51dbe9)'
      scriptType: 'ps'
      scriptLocation: 'inlineScript'
      inlineScript: |
        $functionAppExists = az functionapp show --resource-group 'Projet-2' --name 'FunctionAppProjet23' --query "name" -o tsv
        if (-not $functionAppExists) {
            az functionapp create `
              --resource-group 'Projet-2' `
              --name 'FunctionAppProjet23' `
              --storage-account 'storageprojet23' `
              --consumption-plan-location 'canadacentral' `
              --runtime 'dotnet'
            Write-Host "Function App créée avec succès."
        } else {
            Write-Host "La Function App existe déjà."

  # Étape 6 : Récupérer les dépendances
  - script: |
      dotnet restore
      dotnet build --configuration Release
    workingDirectory: './azure-functions'
    displayName: 'Restaurer les dépendances'

  # Étape 7 : Installation de la version spécifique de .NET SDK
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '6.x' # Version SDK .NET

  # Étape 8 : Vérification des fichiers
  - script: dir $(System.DefaultWorkingDirectory)/azure-functions /s
    displayName: 'Liste des fichiers dans le répertoire de travail'

  # Étape 9 : Publier les projets
  - task: DotNetCoreCLI@2
    inputs:
      command: 'publish'
      arguments: '--configuration Release --output publish_output'
      projects: '**/*.csproj' # Recherche tous les projets
      publishWebProjects: false
      modifyOutputPath: false
      zipAfterPublish: false

  # Étape 10 : Archiver les fichiers
  - task: ArchiveFiles@2
    displayName: "Archive files"
    inputs:
      rootFolderOrFile: "$(System.DefaultWorkingDirectory)"
      includeRootFolder: false
      archiveFile: "$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip"

  # Étape 11 : Publier les artefacts
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip'
      artifactName: 'drop'

  # Étape 12 : Déployer la Function App
  - task: AzureFunctionApp@1
    displayName: 'Déployer les fonctions dans Azure'
    inputs:
      azureSubscription: 'Azure subscription 1(2)(4752c137-48fe-4a21-ac6e-435c1d51dbe9)'
      appType: 'functionApp'
      appName: 'FunctionAppProjet23'
      package: $(System.DefaultWorkingDirectory)/*.zip

  # Étape 13 : Vérification finale
  - script: |
      echo "Chaîne Service Bus utilisée : $(ServiceBusConnectionString)"
      echo "Chaîne Blob Storage utilisée : $(AzureWebJobsStorage)"
      echo "Déploiement terminé avec succès."
    displayName: 'Vérification finale'
