trigger:
- main

pool: 'default'

variables:
  # Variables dynamiques pour les chaînes de connexion
  ServiceBusConnectionString: ''
  AzureWebJobsStorage: ''

steps:
# Étape 1 : Déployer le Blob Storage
- task: AzureResourceManagerTemplateDeployment@3
  displayName: 'Déployer le Blob Storage'
  inputs:
    azureResourceManagerConnection: 'Azure subscription 1(2)(4752c137-48fe-4a21-ac6e-435c1d51dbe9)'
    resourceGroupName: 'Projet-2'
    location: 'canadacentral'
    templateLocation: 'Linked artifact'
    csmFile: 'infra/azuredeploy-storage.json'
    csmParametersFile: 'infra/parameters-storage.json'

# Étape 2 : Récupérer la chaîne de connexion AzureWebJobsStorage
- task: AzureCLI@2
  displayName: 'Récupérer la chaîne de connexion AzureWebJobsStorage'
  inputs:
    azureSubscription: 'Azure subscription 1(2)(4752c137-48fe-4a21-ac6e-435c1d51dbe9)'
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      $STORAGE_CONNECTION_STRING = az storage account show-connection-string `
        --resource-group 'Projet-2' `
        --name 'storageprojet23' `
        --query 'connectionString' -o tsv
      Write-Host "##vso[task.setvariable variable=AzureWebJobsStorage]$STORAGE_CONNECTION_STRING"

# Étape 3 : Déployer le Service Bus
- task: AzureResourceManagerTemplateDeployment@3
  displayName: 'Déployer le Service Bus'
  inputs:
    azureResourceManagerConnection: 'Azure subscription 1(2)(4752c137-48fe-4a21-ac6e-435c1d51dbe9)'
    resourceGroupName: 'Projet-2'
    location: 'canadacentral'
    templateLocation: 'Linked artifact'
    csmFile: 'infra/azuredeploy-servicebus.json'
    csmParametersFile: 'infra/parameters-servicebus.json'

# Étape 4 : Attendre la disponibilité du Service Bus
- task: PowerShell@2
  displayName: 'Attente de la disponibilité du Service Bus'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Attente de 30 secondes pour la disponibilité du Service Bus..."
      Start-Sleep -Seconds 30

# Étape 5 : Récupérer la clé de connexion Service Bus
- task: AzureCLI@2
  displayName: 'Récupérer la clé de connexion Service Bus'
  inputs:
    azureSubscription: 'Azure subscription 1(2)(4752c137-48fe-4a21-ac6e-435c1d51dbe9)'
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      $CONNECTION_STRING = az servicebus namespace authorization-rule keys list `
        --resource-group 'Projet-2' `
        --namespace-name 'AzureBus-TMEB' `
        --name 'RootManageSharedAccessKey' `
        --query 'primaryConnectionString' -o tsv
      Write-Host "##vso[task.setvariable variable=ServiceBusConnectionString]$CONNECTION_STRING"

# Étape 6 : Déployer la Function App
- task: AzureResourceManagerTemplateDeployment@3
  displayName: 'Déployer la Function App'
  inputs:
    azureResourceManagerConnection: 'Azure subscription 1(2)(4752c137-48fe-4a21-ac6e-435c1d51dbe9)'
    resourceGroupName: 'Projet-2'
    location: 'canadacentral'
    templateLocation: 'Linked artifact'
    csmFile: 'infra/azuredeploy-function.json'
    csmParametersFile: 'infra/parameters-function.json'
    overrideParameters: >
      -serviceBusConnectionString "$(ServiceBusConnectionString)"

# Étape 7 : Configurer les variables d'application pour la Function App
- task: AzureCLI@2
  displayName: 'Configurer les variables d’application'
  inputs:
    azureSubscription: 'Azure subscription 1(2)(4752c137-48fe-4a21-ac6e-435c1d51dbe9)'
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az functionapp config appsettings set `
        --resource-group 'Projet-2' `
        --name 'FunctionAppProjet23' `
        --settings AzureWebJobsStorage=$(AzureWebJobsStorage) `
                   ServiceBusConnectionString=$(ServiceBusConnectionString)

# Étape 8 : Installer le SDK .NET 8.x
- task: UseDotNet@2
  displayName: 'Installer .NET SDK 8.x'
  inputs:
    packageType: 'sdk'
    version: '8.0.100'

# Étape 9 : Restaurer les dépendances
- script: |
    dotnet restore
  workingDirectory: './azure-functions'
  displayName: 'Restaurer les dépendances'

# Étape 10 : Compiler le projet
- script: |
    dotnet build -c Release
  workingDirectory: './azure-functions'
  displayName: 'Compiler le projet'

# Étape 11 : Publier le projet
- script: |
    dotnet publish -c Release -o ./publishs
  workingDirectory: './azure-functions'
  displayName: 'Publier le projet'

# Étape 12 : Déployer les fonctions dans la Function App
- task: AzureFunctionApp@1
  displayName: 'Déployer les fonctions'
  inputs:
    azureSubscription: 'Azure subscription 1(2)(4752c137-48fe-4a21-ac6e-435c1d51dbe9)'
    appType: 'functionApp'
    appName: 'FunctionAppProjet23'
    package: '$(System.DefaultWorkingDirectory)/azure-functions/publishs'
